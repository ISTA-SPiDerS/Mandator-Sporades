syntax = "proto3";
option go_package = "proto/";

/*
  Client batch refers to a client request batch, or a client response batch
  Client request batch is sent by a client once it has collected a batch of client requests
  Client response batch is sent by a replica node
*/

message SingleOperation {
  string command = 1;
}

message ClientBatch {
  string unique_id = 1;
  repeated SingleOperation requests = 2;
  int64 sender = 3;
}

/*
  replica batch refers to a single value proposed in a consensus message
*/

message ReplicaBatch {
  string unique_id = 1;
  repeated ClientBatch requests = 2;
  int64 sender = 3;
}

/*
  Status is sent by a client to inform replicas about actions that include, but not limited to
  1. To establish connections to other nodes
  2. To write the logs to files
  3. Bootstrap consensus
*/

message Status {
  int32 type = 1; // 1 for bootstrap, 2 for log print, 3 consensus start
  string note = 2;
  int64 sender = 3;
}

/*
  Sporades defines the single consensus proto message type
*/

message Pipelined_Sporades {
  int32 sender = 1;
  int32 receiver = 2;
  string unique_id = 3; // to specify the fall back block id to which the vote async is for
  int32 type = 4; // 1-propose, 2-vote, 3-timeout, 4-propose-async, 5-vote-async, 6-timeout-internal, 7-consensus-external-request, 8-consensus-external-response, 9-fallback-complete
  string note = 5;
  int32 v = 6 ; // view number
  int32 r = 7;// round number
  message Block {
    string id = 1;
    int32 v = 2 ; // view number
    int32 r = 3;// round number
    Block parent = 4;
    repeated ReplicaBatch commands = 5;
    int32 level = 6; // for the fallback mode
  }
  Block blockHigh = 8;
  Block blockNew = 9;
  Block blockCommit = 10;
}